# Chapter 04 - Functions

## Exercise 40_01_01.00

We want to write a function that adds two numbers.
1. Create a function that takes two parameters, adds the parameters together, and returns the result.
2. Set up two different variables with two different values.
3. Use your function on the two variables, and output the result using
console.log.
4. Create a second call to the function using two more numbers as arguments
sent to the function.


## Exercise 40_01_01.10

We are going to create a program that will randomly describe an inputted name.
1. Create an array of descriptive words.
2. Create a function that contains a prompt asking the user for a name.
3. Select a random value from the array using Math.random.
4. Output into the console the prompt value and the randomly selected array value.
5. Invoke the function.


## Exercise 40_01_01.20

Create a basic calculator that takes two numbers and one string value indicating an operation. If the operation equals add, the two numbers should be added. If the operation equals subtract, the two numbers should be subtracted from one another. If there is no option specified, the value of the option should be add. The result of this function needs to be logged. Test your function by invoking it with different operators and no operator specified.

1. Set up two variables containing number values.
2. Set up a variable to hold an operator, either + or -.
3. Create a function that retrieves the two values and the operator string value within its parameters. Use those values with a condition to check if the operator is + or -, and add or subtract the values accordingly (remember if not presented with a valid operator, the function should default to addition).
4. Within console.log(), call the function using your variables and output the response to the console.
5. Update the operator value to be the other operator type—either plus or minus—and call to the function again with the new updated arguments.


## Exercise 40_01_01.30

Modify the calculator that you made in practice exercise 40_01_01.20 to return added values instead of printing them. Then, call the function 10 or more times in a loop, and store the results in an array. Once the loop finishes, output the final array into the console.
1. Set up an empty array to store the values that will be calculated within the loop.
2. Create a loop that runs 10 times, incrementing by 1 each time, creating two values each iteration. For the first value, multiply the value of the loop count by 5. For the second value, multiply the value of the loop counter by itself.
3. Create a function that returns the value of the two parameters passed into the function when it is called. Add the values together, returning the result.
4. Within the loop, call the calculation function, passing in the two values as arguments into the function and storing the returned result in a response variable.
5. Still within the loop, push the result values into the array as it iterates through the loop.
6. After the loop is complete, output the value of the array into the console.
7. You should see the values [0, 6, 14, 24, 36, 50, 66, 84, 104, 126] for the array in the console.


## Exercise 40_01_01.40

Create a countdown loop starting at a dynamic value of 10.
1. Set the start variable at a value of 10, which will be used as the starting
value for the loop.
2. Create a function that takes one argument, which is the countdown value.
3. Within the function, output the current value of the countdown into the console.
4. Add a condition to check if the value is less than 1; if it is, then return the function.
5. Add a condition to check if the value of the countdown is not less than 1, then continue to loop by calling the function within itself.
6. Make sure you add a decrement operator on the countdown so the preceding condition eventually will be true to end the loop. Every time it loops, the value will decrease until it reaches 0.
7. Update and create a second countdown using a condition if the value is greater than 0. If it is, decrease the value of the countdown by 1.
8. Use return to return the function, which then invokes it again and again until the condition is no longer true.
9. Make sure, when you send the new countdown value as an argument into the function, that there is a way out of the loop by using the return keyword and a condition that continues the loop if met.


## Exercise 40_01_01.50

1. Set a variable name and assign a function to it. Create a function expression with one parameter that outputs a provided argument to the console.
2. Pass an argument into the function.
3. Create the same function as a normal function declaration.


## Exercise 40_01_01.60

Use the arrow format to create functions that output the values one and two to the console. Create a third function that outputs the value three to the console, and then invokes the first two functions. Create a fourth function that outputs the word four to the console and also use setTimeout() to invoke the first function immediately and then the third function.

What does your output look like in the console? Try to get the console to output:

```
Four
Three
One
Two
One
```


## Exercise 40_01_01.70

Write a JavaScript function that reverses a number.

```
Example x = 32243;
Expected Output : 34223
```

## Exercise 40_01_01.80

Write a JavaScript function that checks whether a passed string is a palindrome or not

## Exercise 40_01_01.90

Write a JavaScript function that accepts a string as a parameter and converts the first letter of each word into upper case.

```
Example string : 'the quick brown fox'
Expected Output : 'The Quick Brown Fox '
```

## Exercise 40_01_01.95

Write a JavaScript function that generates all combinations of a string.

```
Example string : 'dog'
Expected Output : d,do,dog,o,og,g
```


## Exercise 40_01_01.100


1. What value is output into the console?
```
let val = 10;
function tester(val){
    val += 10;
    if(val < 100){
        return tester(val);
    }
return val; }
tester(val);
console.log(val);
```


2. What will be output into the console by the below code?
```
let testFunction = function(){
    console.log("Hello");
}();
```


3. What will be output to the console?
```
(function () {
    console.log("Hello");
})();
(function () {
    let firstName = "JavaScript";
})();
let result = (function () {
    let firstName = "JavaScript";
    return firstName;
})();
console.log(result);
(function (firstName) {
    console.log("My Name is " + firstName);
})("JavaScript");
```


4. What will be output to the console?
```
let test2 = (num) => num + 5;
console.log(test2(14));
```


5. What will be output to the console?
```
var addFive1 = function addFive1(num) {
return num + 2;
};
let addFive2 = (num) => num + 2;
console.log(addFive1(14));
```